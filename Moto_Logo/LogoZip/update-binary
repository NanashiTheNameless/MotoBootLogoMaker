#!/system/bin/sh
# TWRP-compatible update-binary (shell) to flash logo.bin to logo(_a/_b) on A/B Qualcomm devices.
# Invoked by recovery as: update-binary <api> <outfd> <zipfile>
set -eu

API="${1:-3}"
OUTFD_RAW="${2:-1}"
ZIPFILE="${3:-/sdcard/flash.zip}"

# ---------- UI helpers ----------
detect_outfd() {
  if [ -e "/proc/self/fd/$OUTFD_RAW" ] 2>/dev/null; then
    echo "$OUTFD_RAW"; return
  fi
  for fd in 3 2 1; do
    if [ -e "/proc/self/fd/$fd" ] 2>/dev/null; then
      echo "$fd"; return
    fi
  done
  echo "1"
}
OUTFD="$(detect_outfd)"

ui_print() {
  if [ -e "/proc/self/fd/$OUTFD" ] 2>/dev/null; then
    printf 'ui_print %s\n' "$*" >"/proc/self/fd/$OUTFD"
    printf 'ui_print\n' >"/proc/self/fd/$OUTFD"
  fi
}

set_progress() {
  if [ -e "/proc/self/fd/$OUTFD" ] 2>/dev/null; then
    printf 'set_progress %s\n' "$1" >"/proc/self/fd/$OUTFD"
  fi
}

abort_install() { ui_print "Error: $*"; exit 1; }
have_cmd() { command -v "$1" >/dev/null 2>&1; }

# ---------- Zip extraction ----------
WORKDIR="/tmp/logo_flash.$$"
rm -rf "$WORKDIR"; mkdir -p "$WORKDIR"

extract_logo() {
  ui_print "• Locating logo.bin in ZIP…"
  if have_cmd unzip; then
    unzip -l "$ZIPFILE" 'logo.bin' >/dev/null 2>&1 || abort_install "logo.bin not found at ZIP root."
    ui_print "• Extracting logo.bin…"
    unzip -o "$ZIPFILE" 'logo.bin' -d "$WORKDIR" >/dev/null
  elif have_cmd busybox && busybox unzip -hh >/dev/null 2>&1; then
    busybox unzip -l "$ZIPFILE" 'logo.bin' >/dev/null 2>&1 || abort_install "logo.bin not found at ZIP root."
    ui_print "• Extracting logo.bin (busybox)…"
    busybox unzip -o "$ZIPFILE" 'logo.bin' -d "$WORKDIR" >/dev/null
  else
    abort_install "No unzip available in recovery environment."
  fi
  [ -f "$WORKDIR/logo.bin" ] || abort_install "Extraction failed: logo.bin missing after unzip."
}

# ---------- Partition discovery ----------
BYNAME_CANDIDATES="
/dev/block/bootdevice/by-name
/dev/block/platform/*/by-name
/dev/block/*/by-name
"

find_part() {
  local name="$1"
  for base in $BYNAME_CANDIDATES; do
    for d in $base; do
      [ -d "$d" ] || continue
      if [ -e "$d/${name}_a" ] || [ -e "$d/${name}_b" ]; then
        echo "$d/${name}_a|$d/${name}_b"; return 0
      fi
      if [ -e "$d/$name" ]; then
        echo "$d/$name"; return 0
      fi
    done
  done
  return 1
}

resolve_targets() {
  local out
  if out="$(find_part logo 2>/dev/null)"; then
    :
  elif out="$(find_part splash 2>/dev/null)"; then
    :
  else
    abort_install "Could not locate logo/splash partition under by-name."
  fi
  echo "$out" | tr '|' ' '
}

filesize() { stat -c '%s' "$1" 2>/dev/null || wc -c <"$1"; }
partsize() { blockdev --getsize64 "$1" 2>/dev/null || echo 0; }

flash_to_part() {
  local part="$1" img="$2"
  local ps fs
  ps="$(partsize "$part")" || ps=0
  fs="$(filesize "$img")" || fs=0
  [ "$ps" -gt 0 ] || abort_install "Cannot determine size for $part."
  [ "$fs" -le "$ps" ] || abort_install "logo.bin ($fs bytes) exceeds $part ($ps bytes)."

  ui_print "• Writing $(basename "$img") to $(basename "$part")…"
  if dd if="$img" of="$part" bs=4M conv=fsync,notrunc status=none 2>/dev/null; then
    sync
    ui_print "  ✔ Flashed $(basename "$part")"
  else
    abort_install "dd failed for $part."
  fi
}

# ---------- Main ----------
ui_print "========================================"
ui_print "   Qualcomm A/B Logo Flasher (TWRP)     "
ui_print "========================================"
set_progress 0.05

extract_logo
IMG="$WORKDIR/logo.bin"
set_progress 0.15

TARGETS="$(resolve_targets)"
ui_print "• Target partitions: $TARGETS"
set_progress 0.25

for tgt in $TARGETS; do [ -e "$tgt" ] || abort_install "Partition path not found: $tgt"; done

count=0; total=$(echo "$TARGETS" | wc -w | awk '{print $1}')
for tgt in $TARGETS; do
  count=$((count + 1))
  awk -v c="$count" -v t="$total" 'BEGIN{printf "set_progress %.2f\n", 0.25 + (0.70*(c/t))}' >/proc/self/fd/"$OUTFD" 2>/dev/null || true
  flash_to_part "$tgt" "$IMG"
done

set_progress 1.0
ui_print "• Done. You may now reboot."
exit 0
